#!/usr/bin/env python
import argparse
import logging
import logging.config
import os.path
import sys

import asyncio
from syncrypt.app import SyncryptApp
from syncrypt.app.cli import CLIAuthenticationProvider
from syncrypt.config import AppConfig
from syncrypt.models import Vault
from syncrypt.utils.logging import setup_logging

LOGLEVELS = ['CRITICAL', 'ERROR', 'WARN', 'INFO', 'DEBUG']

class SyncryptCmd():
    command = None
    description = None

    def configure_parser(self, parser):
        parser.add_argument('-l', metavar='LOGLEVEL', type=str, default='INFO',
                dest='loglevel', choices=LOGLEVELS,
                help='Log level: ' + ', '.join(LOGLEVELS))

    def __init__(self):
        self.parser = argparse.ArgumentParser(
                description=self.description,
                prog='%s %s' % ('syncryt', self.command)
            )
        self.configure_parser(self.parser)
        self.config = None

    def parse(self, args):
        self.config = self.parser.parse_args(args)

    def setup(self):
        setup_logging(self.config.loglevel)
        self.loop = asyncio.get_event_loop()

    def shutdown(self):
        self.loop.close()

    def run(self):
        raise NotImplementedError()

class SingleVaultCmd(SyncryptCmd):
    '''command that supports only a single vault directory'''

    def configure_parser(self, parser):
        super(SingleVaultCmd, self).configure_parser(parser)
        parser.add_argument('-d', metavar='DIRECTORY', type=str,
                default='.', dest='directory', help='directory (default: .)')

    def setup(self):
        super(SingleVaultCmd, self).setup()
        app_config = AppConfig()
        app_config.add_vault_dir(self.config.directory )
        self.app = SyncryptApp(app_config, auth_provider=CLIAuthenticationProvider())

class MultipleVaultCmd(SyncryptCmd):
    '''command that supports multiple vault directories'''

    def configure_parser(self, parser):
        super(MultipleVaultCmd, self).configure_parser(parser)
        parser.add_argument('-d', metavar='DIRECTORY', type=str,
                action='append', dest='directory', help='directory (default: .)')

    def setup(self):
        super(MultipleVaultCmd, self).setup()

        # For now, each command will work on a default AppConfig object. When
        # you want app-level configuration, use ``syncrypt_daemon``.
        app_config = AppConfig()
        DIRECTORIES = (['.'] if self.config.directory is None else self.config.directory)
        for directory in DIRECTORIES:
            app_config.add_vault_dir(directory)

        self.app = SyncryptApp(app_config, auth_provider=CLIAuthenticationProvider())

class Pull(MultipleVaultCmd):
    command = 'pull'
    description = 'pull all files from the latest revision'

    def run(self):
        self.loop.run_until_complete(self.app.pull())

class Push(MultipleVaultCmd):
    command = 'push'
    description = 'push local changes to the server'

    def run(self):
        self.loop.run_until_complete(self.app.push())

class Watch(MultipleVaultCmd):
    command = 'watch'
    description = 'watch directory for changes'

    def run(self):
        self.loop.run_until_complete(self.app.start())
        self.loop.run_forever()

class Init(SingleVaultCmd):
    command = 'init'
    description = 'register the directory as a Syncrypt vault'

    def run(self):
        self.loop.run_until_complete(self.app.init())

class Info(MultipleVaultCmd):
    command = 'info'
    description = 'show vault information'

    def run(self):
        self.loop.run_until_complete(self.app.info())

class ConfigSet(SingleVaultCmd):
    command = 'set'
    description = 'set a vault config parameter'

    def configure_parser(self, parser):
        super(ConfigSet, self).configure_parser(parser)
        parser.add_argument('setting', help='the thing to set')
        parser.add_argument('value', help='the value to set it to')

    def run(self):
        self.loop.run_until_complete(
            self.app.set(self.config.setting, self.config.value)
        )

class ConfigUnset(SingleVaultCmd):
    command = 'unset'
    description = 'unset a vault config parameter'

    def configure_parser(self, parser):
        super(ConfigUnset, self).configure_parser(parser)
        parser.add_argument('setting', help='the thing to unset')

    def run(self):
        self.loop.run_until_complete(self.app.unset(self.config.setting))

class Log(MultipleVaultCmd):
    command = 'log'
    description = 'show recent changes (file uploads, deletions, etc)'

    def run(self):
        self.loop.run_until_complete(self.app.print_log())

class Export(SingleVaultCmd):
    command = 'export'
    description = 'export vault config and keys to backup or share'

    def configure_parser(self, parser):
        super(Export, self).configure_parser(parser)
        parser.add_argument('filename', help='export filename')

    def run(self):
        self.loop.run_until_complete(self.app.export(self.config.filename))


COMMANDS = [Init(), Pull(), Push(), Watch(), Info(), Log(), ConfigSet(),
        ConfigUnset(), Export()]
COMMAND_NAMES = [c.command for c in COMMANDS]

global_parser = argparse.ArgumentParser(
    usage='''syncrypt <command> [<args>]

available commands:
''' + '\n'.join([
    '  {0.command:11s} {0.description}'.format(c) for c in COMMANDS
    ]))

global_parser.add_argument('command', help='Subcommand to run', choices=COMMAND_NAMES)

args = global_parser.parse_args(sys.argv[1:2])

for c in COMMANDS:
    if c.command == args.command:
        c.parse(sys.argv[2:])
        c.setup()
        c.run()
        c.shutdown()

