#!/usr/bin/env python
import argparse
import logging
import logging.config
import os.path
import sys

import asyncio
from syncrypt import Vault
from syncrypt.app import SyncryptApp
from syncrypt.config import VaultConfig
from syncrypt.utils.logging import setup_logging

COMMANDS = ['init', 'pull', 'push', 'watch']
LOGLEVELS = ['CRITICAL', 'ERROR', 'WARN', 'INFO', 'DEBUG']

parser = argparse.ArgumentParser(description='Run Syncrypt client')
parser.add_argument('command', metavar='cmd', type=str,
        choices=COMMANDS, help='Command to run: ' + ', '.join(COMMANDS))
parser.add_argument('-d', metavar='DIRECTORY', type=str,
        action='append',dest='directory', help='directory (default: .)')
parser.add_argument('-l', metavar='LOGLEVEL', type=str, default='INFO',
        dest='loglevel', choices=LOGLEVELS, help='Log level: ' + ', '.join(LOGLEVELS))

config = parser.parse_args()

app = SyncryptApp(VaultConfig())
for directory in (['.'] if config.directory is None else config.directory):
    app.add_vault(Vault(directory))

setup_logging(config.loglevel)

loop = asyncio.get_event_loop()
if config.command == 'init':
    loop.run_until_complete(app.init())
elif config.command == 'watch':
    loop.run_until_complete(app.start())
    loop.run_forever()
elif config.command == 'pull':
    loop.run_until_complete(app.pull())
elif config.command == 'push':
    loop.run_until_complete(app.push())

loop.close()

