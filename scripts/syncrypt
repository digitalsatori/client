#!/usr/bin/env python

import argparse
import logging
import logging.config
import os.path
import sys

import asyncio
from syncrypt import Vault
from syncrypt.app import SyncryptApp
from syncrypt.config import VaultConfig

COMMANDS = ['init', 'pull', 'push', 'watch']
LOGLEVELS = ['CRITICAL', 'ERROR', 'WARN', 'INFO', 'DEBUG']

parser = argparse.ArgumentParser(description='Run Syncrypt client')
parser.add_argument('command', metavar='cmd', type=str,
        choices=COMMANDS, help='Command to run: ' + ', '.join(COMMANDS))
parser.add_argument('-d', metavar='DIRECTORY', type=str,
        action='append',dest='directory', help='directory (default: .)')
parser.add_argument('-l', metavar='LOGLEVEL', type=str, default='INFO',
        dest='loglevel', choices=LOGLEVELS, help='Log level: ' + ', '.join(LOGLEVELS))

config = parser.parse_args()

app = SyncryptApp(VaultConfig())
for directory in config.directory:
    app.add_vault(Vault(directory))

logging.config.dictConfig({
    'version': 1,
    'formatters': {
        'colored': {
            '()': 'colorlog.ColoredFormatter',
            'format':
                '%(log_color)s%(levelname)s:%(name)s:%(message)s',
        }
    },
    'handlers': {
        'stream': {
            'class': 'logging.StreamHandler',
            'formatter': 'colored',
            'level': config.loglevel
        },
    },
    'loggers': {
        'syncrypt': {
            'handlers': ['stream'],
            'level': config.loglevel
        },
    },
})

loop = asyncio.get_event_loop()

if config.command == 'init':
    loop.run_until_complete(app.init())
elif config.command == 'watch':
    asyncio.ensure_future(app.start())
    loop.run_forever()
elif config.command == 'pull':
    loop.run_until_complete(app.pull())
elif config.command == 'push':
    loop.run_until_complete(app.push())

loop.close()

