environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env.cmd"

  artifact_tray_url:
    secure: h2sg2AnnOCv7Ds/1HCbC3znT8HCoUHeGBAMwDqMNbil7ydRpTYx+zagdTNkcG/N6

  matrix:

    - PYTHON: "C:\\Python36"
      PYTHON_VERSION: "3.6.x"
      PYTHON_ARCH: "32"
      DIST_PLATFORM: "win-i386"
      WHEEL_ARCH: "win32"
      WHEEL_PLATFORM: "cp36-cp36m"

    - PYTHON: "C:\\Python36-x64"
      PYTHON_VERSION: "3.6.x"
      PYTHON_ARCH: "64"
      DIST_PLATFORM: "win-x86_64"
      WHEEL_ARCH: "win_amd64"
      WHEEL_PLATFORM: "cp36-cp36m"
      DEPLOY_ARTIFACT: "true"

    - PYTHON: "C:\\Python37"
      PYTHON_VERSION: "3.7.x"
      PYTHON_ARCH: "32"
      DIST_PLATFORM: "win-i386"
      WHEEL_ARCH: "win32"
      WHEEL_PLATFORM: "cp37-cp37m"

    - PYTHON: "C:\\Python37-x64"
      PYTHON_VERSION: "3.7.x"
      PYTHON_ARCH: "64"
      DIST_PLATFORM: "win-x86_64"
      WHEEL_ARCH: "win_amd64"
      WHEEL_PLATFORM: "cp37-cp37m"

init:
  # Set "build version number" to "short-commit-hash" or when tagged to "tag name" (Travis style)
  - ps: >-
      if ($env:APPVEYOR_REPO_TAG -eq "true")
      {
        Update-AppveyorBuild -Version "$env:APPVEYOR_REPO_TAG_NAME"
        Set-AppveyorBuildVariable -Name "SYNCRYPT_VER" -Value "$($env:APPVEYOR_REPO_TAG_NAME.TrimStart('v'))"
      }
      else
      {
        Update-AppveyorBuild -Version "dev-$($env:APPVEYOR_REPO_COMMIT.substring(0,7))"
        Set-AppveyorBuildVariable -Name "SYNCRYPT_VER" -Value "dev-$($env:APPVEYOR_REPO_COMMIT.substring(0,7))"
      }

install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          throw "There are newer queued builds for this pull request, failing early." }
  - ECHO "Filesystem root:"
  - ps: "ls \"C:/\""

  - ECHO "Installed SDKs:"
  - ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""

  # Install Python (from the official .msi of http://python.org) and pip when
  # not already installed.
  - ps: if (-not(Test-Path($env:PYTHON))) { & appveyor\install.ps1 }

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Upgrade to the latest version of pip to avoid it displaying warnings
  # about it being out of date.
  - "pip install --disable-pip-version-check --user --upgrade pip setuptools"

  # Install python-snappy from wheel
  - "pip install https://syncrypt.space/build/python_snappy-0.5.3-%WHEEL_PLATFORM%-%WHEEL_ARCH%.whl"

  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  - "pip install -e ."

  # Install dist deps as well
  - "pip install -e \".[dist]\""

  # Install win deps as well
  - "pip install -e \".[win]\""

  # Install test deps as well
  - "pip install -e \".[test]\""

before_build:
  - "mypy syncrypt tests scripts/syncrypt_daemon"
  - "pylint syncrypt scripts"
  - "py.test -m \"not (requires_server or external_resources)\""

build_script:
  # Build the compiled extension
  - "pyinstaller --onefile --hidden-import six --hidden-import packaging --hidden-import packaging.version --hidden-import packaging.specifiers --hidden-import packaging.requirements --hidden-import pkg_resources._vendor.appdirs scripts/syncrypt"
  - "pyinstaller --onefile --hidden-import six --hidden-import packaging --hidden-import packaging.version --hidden-import packaging.specifiers --hidden-import packaging.requirements --hidden-import pkg_resources._vendor.appdirs scripts/syncrypt_daemon"
  - ps: Compress-Archive -Path dist\*.exe -Update -DestinationPath syncrypt-$env:SYNCRYPT_VER.$env:DIST_PLATFORM.zip

test_script:
  - "dist\\syncrypt.exe --version"
  - "dist\\syncrypt_daemon.exe -h"

artifacts:
  # Archive the generated packages in the ci.appveyor.com build report.
  - path: \*.zip

on_success:
  # Weird CMD way to set VERSION env var to current syncrypt version
  - "for /f %%i in ('dist\\syncrypt.exe --short-version') do set SYNCRYPT_VERSION=%%i"
  # Only push to artifact tray for the most recent python version
  - "IF \"%DEPLOY_ARTIFACT%\" == \"true\" (curl -X POST --header \"Content-Type: application/octet-stream\" --data-binary \"@syncrypt-%SYNCRYPT_VER%.%DIST_PLATFORM%.zip\" \"%artifact_tray_url%syncrypt-%DIST_PLATFORM%-py%PYTHON_VERSION%.zip/%APPVEYOR_REPO_BRANCH%/%SYNCRYPT_VERSION%/\")"
